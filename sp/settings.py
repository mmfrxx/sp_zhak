"""
Django settings for sp project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import datetime

import dj_database_url
from decouple import config

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'static'),
)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')
# SECRET_KEY = "ht55&&4=x60)jvz2_+(e#t$dqx4vsm+jh@5p&=2_5^k9u@4!_h"

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = config('DEBUG', default=False, cast=bool)
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1',
                 'localhost',
                 'c4059e8f09fb.ngrok.io',
                 'fa4fc41e6321.ngrok.io',
                 '732273afc5fb.ngrok.io',
                 'demo-sp.herokuapp.com']

CORS_ORIGIN_WHITELIST = [
    "https://1e67b76bd328.ngrok.io",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://3fb4f88b07f2.ngrok.io",
    "http://732273afc5fb.ngrok.io",
    "http://c4059e8f09fb.ngrok.io",
    "https://demo-sp.herokuapp.com"
]

AUTH_USER_MODEL = 'authentication.User'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'rest_framework',
    'authentication',
    'rest_framework_simplejwt.token_blacklist',
    # 'django_email_verification',
    'ourplatform',
    'marketplace',
    'django_filters',
    'slackevents_sp',
    'telegram_sp',
    'github_events'
]
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

REST_FRAMEWORK = {
    'NON_FIELD_ERRORS_KEY': 'error',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=5),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=6),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'BLACKLIST_AFTER_ROTATION': True
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
  'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sp.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=config('DATABASE_URL')
    )
}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'sp',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

# jwt

JWT_SECRET_KEY = config('JWT_SECRET_KEY')
# JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY')

# email settings
EMAIL_ACTIVE_FIELD = 'is_active'
EMAIL_SERVER = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_ADDRESS = config('EMAIL')
# EMAIL_ADDRESS = os.environ.get('EMAIL')
EMAIL_FROM_ADDRESS = config('EMAIL')
# EMAIL_FROM_ADDRESS = os.environ.get('EMAIL')
EMAIL_PASSWORD = config('EMAIL_PASSWORD')
# EMAIL_PASSWORD = os.environ.get('EMAIL_PASSWORD')
EMAIL_MAIL_SUBJECT = 'Confirm your email'
EMAIL_MAIL_HTML = 'mail_body.html'
EMAIL_PAGE_TEMPLATE = 'confirm_template.html'
EMAIL_PAGE_DOMAIN = 'http://127.0.0.1:8000/'

# SLACK API Configurations
# ----------------------------------------------
SLACK_CLIENT_ID = config('CLIENT_ID')
SLACK_CLIENT_SECRET = config('CLIENT_SECRET')
SLACK_VERIFICATION_TOKEN = config('VERIFICATION_TOKEN')
SLACK_BOT_USER_TOKEN = config('SLACK_BOT_USER_TOKEN')
GITHUB_CLIENT_ID = config('GITHUB_CLIENT_ID')
GITHUB_CLIENT_SECRET = config('GITHUB_CLIENT_SECRET')
TG_BOT_TOKEN = config('TG_BOT_TOKEN')
GITHUB_DEVELOPER_KEY = config('GITHUB_DEVELOPER_KEY')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



# ------------------------------------------------------------------------------------------------------------------------------
#
# """
# Django settings for sp project.
#
# Generated by 'django-admin startproject' using Django 2.2.2.
#
# For more information on this file, see
# https://docs.djangoproject.com/en/2.2/topics/settings/
#
# For the full list of settings and their values, see
# https://docs.djangoproject.com/en/2.2/ref/settings/
# """
#
# import os
# import datetime
#
# import dj_database_url
# from decouple import config
#
# PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
#
# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/1.9/howto/static-files/
# STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
# STATIC_URL = '/static/'
#
# # Extra places for collectstatic to find static files.
# STATICFILES_DIRS = (
#     os.path.join(PROJECT_ROOT, 'static'),
# )
#
# # Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#
# # Quick-start development settings - unsuitable for production
# # See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/
#
# # SECURITY WARNING: keep the secret key used in production secret!
# # SECRET_KEY = config('SECRET_KEY')
# SECRET_KEY = "ht55&&4=x60)jvz2_+(e#t$dqx4vsm+jh@5p&=2_5^k9u@4!_h"
#
# # SECURITY WARNING: don't run with debug turned on in production!
# # DEBUG = config('DEBUG', default=False, cast=bool)
# DEBUG = True
#
# ALLOWED_HOSTS = ['127.0.0.1',
#                  'localhost',
#                  'c4059e8f09fb.ngrok.io',
#                  'fa4fc41e6321.ngrok.io',
#                  '732273afc5fb.ngrok.io',
#                  'demo-sp.herokuapp.com']
#
# CORS_ORIGIN_WHITELIST = [
#     "https://1e67b76bd328.ngrok.io",
#     "http://localhost:8080",
#     "http://127.0.0.1:8080",
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
#     "http://3fb4f88b07f2.ngrok.io",
#     "http://732273afc5fb.ngrok.io",
#     "http://c4059e8f09fb.ngrok.io",
#     "https://demo-sp.herokuapp.com"
# ]
#
# AUTH_USER_MODEL = 'authentication.User'
#
# # Application definition
#
# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'corsheaders',
#     'rest_framework',
#     'authentication',
#     'rest_framework_simplejwt.token_blacklist',
#     'ourplatform',
#     'marketplace',
#     'django_filters',
#     'slackevents_sp',
#     'telegram_sp',
#     'github_events'
# ]
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, "media")
#
# REST_FRAMEWORK = {
#     'NON_FIELD_ERRORS_KEY': 'error',
#     'DEFAULT_AUTHENTICATION_CLASSES': [
#         'rest_framework_simplejwt.authentication.JWTAuthentication',
#     ],
#     'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
# }
#
# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=5),
#     'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=6),
#     'DEFAULT_RENDERER_CLASSES': (
#         'rest_framework.renderers.JSONRenderer',
#     ),
#     'BLACKLIST_AFTER_ROTATION': True
# }
#
# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#   'whitenoise.middleware.WhiteNoiseMiddleware',
#     'corsheaders.middleware.CorsMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     # 'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]
#
# ROOT_URLCONF = 'sp.urls'
#
# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]
#
# WSGI_APPLICATION = 'sp.wsgi.application'
#
# # Database
# # https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# #
# # DATABASES = {
# #     'default': dj_database_url.config(
# #         default=config('DATABASE_URL')
# #     )
# # }
#
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'sp',
#         'USER': 'postgres',
#         'PASSWORD': 'postgres',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }
#
# # Password validation
# # https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
#
# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]
#
# # Internationalization
# # https://docs.djangoproject.com/en/2.2/topics/i18n/
#
# LANGUAGE_CODE = 'en-us'
#
# TIME_ZONE = 'UTC'
#
# USE_I18N = True
#
# USE_L10N = True
#
# USE_TZ = True
#
# # Static files (CSS, JavaScript, Images)
# # https://docs.djangoproject.com/en/2.2/howto/static-files/
#
# STATIC_URL = '/static/'
#
# # jwt
#
# # JWT_SECRET_KEY = config('JWT_SECRET_KEY')
# JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY')
#
# # email settings
# EMAIL_ACTIVE_FIELD = 'is_active'
# EMAIL_SERVER = 'smtp.gmail.com'
# EMAIL_PORT = 587
# # EMAIL_ADDRESS = config('EMAIL')
# EMAIL_ADDRESS = os.environ.get('EMAIL')
# # EMAIL_FROM_ADDRESS = config('EMAIL')
# EMAIL_FROM_ADDRESS = os.environ.get('EMAIL')
# # EMAIL_PASSWORD = config('EMAIL_PASSWORD')
# EMAIL_PASSWORD = os.environ.get('EMAIL_PASSWORD')
# EMAIL_MAIL_SUBJECT = 'Confirm your email'
# EMAIL_MAIL_HTML = 'mail_body.html'
# EMAIL_PAGE_TEMPLATE = 'confirm_template.html'
# EMAIL_PAGE_DOMAIN = 'http://127.0.0.1:8000/'
#
# # SLACK API Configurations
# # ----------------------------------------------
#
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
#
# SLACK_CLIENT_ID = os.environ.get('CLIENT_ID')
# SLACK_CLIENT_SECRET = os.environ.get('CLIENT_SECRET')
# SLACK_VERIFICATION_TOKEN = os.environ.get('VERIFICATION_TOKEN')
# SLACK_BOT_USER_TOKEN = os.environ.get('SLACK_BOT_USER_TOKEN')
# GITHUB_CLIENT_ID = os.environ.get('GITHUB_CLIENT_ID')
# GITHUB_CLIENT_SECRET = os.environ.get('GITHUB_CLIENT_SECRET')
# GITHUB_DEVELOPER_KEY = os.environ.get('GITHUB_DEVELOPER_KEY')
# TG_BOT_TOKEN = os.environ.get('TG_BOT_TOKEN')